CREATE TABLE REGISTRY_T (
    ID SERIAL PRIMARY KEY,
    Firstname VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    DateOfBirth DATE NOT NULL
);

CREATE TABLE PROFESSOR_T (
    ID INT PRIMARY KEY,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(100) NOT NULL,
    FOREIGN KEY (ID) REFERENCES REGISTRY_T(ID) ON DELETE CASCADE
);

CREATE TABLE STUDENT_T (
    ID INT PRIMARY KEY,
    RegistrationNumber VARCHAR(20) NOT NULL UNIQUE,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(100) NOT NULL,
    FOREIGN KEY (ID) REFERENCES REGISTRY_T(ID) ON DELETE CASCADE
);

CREATE TABLE COURSE_T (
    ID SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Description TEXT,
    Professor_ID INT,
    AcademicYear VARCHAR(9) NOT NULL,
    FOREIGN KEY (Professor_ID) REFERENCES PROFESSOR_T(ID) ON DELETE SET NULL
);


CREATE TABLE REGISTRATIONS_T (
    ID SERIAL PRIMARY KEY ,
    Student_ID INT NOT NULL,
    Course_ID INT NOT NULL,
    RegistrationDate DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (Student_ID) REFERENCES STUDENT_T(ID) ON DELETE CASCADE,
    FOREIGN KEY (Course_ID) REFERENCES COURSE_T(ID) ON DELETE CASCADE,
    UNIQUE (Student_ID, Course_ID) 
);

CREATE TABLE ATTENDANCE_T (
    ID SERIAL PRIMARY KEY,
    Registration_ID INT NOT NULL,
    AttendanceDate DATE NOT NULL,
    IsPresent BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (Registration_ID) REFERENCES REGISTRATIONS_T(ID) ON DELETE CASCADE,
    UNIQUE (Registration_ID, AttendanceDate)
);
